####################################################################
#
# Template for the Moxa E1242 module:
#   4 analog inputs (voltage/current configurable by jumper). The default is voltage mode.
#   4 digital IO (input/output configurable by jumper). The default is DO mode.
#   4 digital inputs
#
# This template has only been tested with the DIO in default DO mode.
#
# Macros:
# P - base PV name
# R - module PV name
# PORT - asyn port name (modbus TCP)
# IP_PORT - the low level IP port name (used for drvAsynIPPortConfigure)
# ADDR - asyn address (defaults to 0)
# PREC - display precision (optional, default=4)
# 
# Matt Pearson
# Feb 2019
#
#####################################################################

# Include common records used by all modules
include "ioLogikCommon.template"

#####################################################################
# Polling functions. The records are processed using a seq record.

# ///
# /// All digital inputs (0-3)
# ///
record(mbbiDirect, "$(P)$(R)DI") {
  field(DESC, "All DI")
  field(DTYP, "asynUInt32Digital")
  field(INP, "@asynMask($(PORT)1w4,48,0x000F,1)INT32_BE")
  field(SCAN, "Passive")
  field(FLNK, "$(P)$(R)DI0")
}
record(bi, "$(P)$(R)DI0") {
  field(INP, "$(P)$(R)DI.B0 MS")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(FLNK, "$(P)$(R)DI1")
  info(archive, "Monitor, 00:00:01, VAL")
}
record(bi, "$(P)$(R)DI1") {
  field(INP, "$(P)$(R)DI.B1 MS")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(FLNK, "$(P)$(R)DI2")
  info(archive, "Monitor, 00:00:01, VAL")
}
record(bi, "$(P)$(R)DI2") {
  field(INP, "$(P)$(R)DI.B2 MS")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(FLNK, "$(P)$(R)DI3")
  info(archive, "Monitor, 00:00:01, VAL")
}
record(bi, "$(P)$(R)DI3") {
  field(INP, "$(P)$(R)DI.B3 MS")
  field(ZNAM, "Off")
  field(ONAM, "On")
  info(archive, "Monitor, 00:00:01, VAL")
}

# ///
# /// Control the alarm state for each DI
# ///
substitute "DI=DI0"
include "DI_alarm.template"

substitute "DI=DI1"
include "DI_alarm.template"

substitute "DI=DI2"
include "DI_alarm.template"

substitute "DI=DI3"
include "DI_alarm.template"

# ///
# /// DI descriptions
# ///
substitute "IO=DI0"
include "description.template"

substitute "IO=DI1"
include "description.template"

substitute "IO=DI2"
include "description.template"

substitute "IO=DI3"
include "description.template"

# ///
# /// All digital output status (0-3)
# ///
record(mbbiDirect, "$(P)$(R)DO") {
  field(DESC, "All DO")
  field(DTYP, "asynUInt32Digital")
  field(INP, "@asynMask($(PORT)1w3,32,0x000F,1)INT32_BE")
  field(SCAN, "Passive")
  field(FLNK, "$(P)$(R)DO0")
}
record(bi, "$(P)$(R)DO0") {
  field(INP, "$(P)$(R)DO.B0 MS")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(FLNK, "$(P)$(R)DO1")
  info(archive, "Monitor, 00:00:01, VAL")
}
record(bi, "$(P)$(R)DO1") {
  field(INP, "$(P)$(R)DO.B1 MS")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(FLNK, "$(P)$(R)DO2")
  info(archive, "Monitor, 00:00:01, VAL")
}
record(bi, "$(P)$(R)DO2") {
  field(INP, "$(P)$(R)DO.B2 MS")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(FLNK, "$(P)$(R)DO3")
  info(archive, "Monitor, 00:00:01, VAL")
}
record(bi, "$(P)$(R)DO3") {
  field(INP, "$(P)$(R)DO.B3 MS")
  field(ZNAM, "Off")
  field(ONAM, "On")
  info(archive, "Monitor, 00:00:01, VAL")
}

# ///
# /// DO descriptions
# ///
substitute "IO=DO0"
include "description.template"

substitute "IO=DO1"
include "description.template"

substitute "IO=DO2"
include "description.template"

substitute "IO=DO3"
include "description.template"

# ///
# /// Read raw ADC input values. 
# /// 4 words of data, initially read into a waveform of 2 LONGs. 
# /// The data is extracted into seperate analog input records, which are
# /// used to scale to engineeing units. The scaling is handled by the 
# /// logic in AI_scaling.template.
# ///
record(waveform, "$(P)$(R)AI") {
  field(NELM, "2")
  field(FTVL, "ULONG")
  field(DTYP, "asynInt32ArrayIn")
  field(INP, "@asyn($(PORT)4w4,512,1)INT32_BE")
  field(SCAN, "Passive")
  field(FLNK, "$(P)$(R)AI_0")
}
# Extract the word for channels 0 and 1
record(subArray, "$(P)$(R)AI_0") {
  field(INP, "$(P)$(R)AI.VAL")
  field(SCAN, "Passive")
  field(FTVL, "ULONG")
  field(NELM, "1")
  field(MALM, "2")
  field(INDX, "0")
  field(FLNK, "$(P)$(R)AI_0Calc")
}
record(calcout, "$(P)$(R)AI_0Calc") {
  field(INPA, "$(P)$(R)AI_0")
  field(CALC, "(A>>16)&0x0000FFFF")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "$(P)$(R)AI0.RVAL PP")
}
record(ai, "$(P)$(R)AI0") {
  field(DTYP, "Raw Soft Channel")
  field(LINR, "LINEAR")
  field(PREC, "$(PREC=4)")
  field(FLNK, "$(P)$(R)AI_1Calc")
  info(archive, "Monitor, 00:00:01, VAL")
}
record(calcout, "$(P)$(R)AI_1Calc") {
  field(INPA, "$(P)$(R)AI_0")
  field(CALC, "(A&0x0000FFFF)")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "$(P)$(R)AI1.RVAL PP")
}
record(ai, "$(P)$(R)AI1") {
  field(DTYP, "Raw Soft Channel")
  field(LINR, "LINEAR")
  field(PREC, "$(PREC=4)")
  field(FLNK, "$(P)$(R)AI_1")
  info(archive, "Monitor, 00:00:01, VAL")
}
# Extract the word for channels 2 and 3
record(subArray, "$(P)$(R)AI_1") {
  field(INP, "$(P)$(R)AI.VAL")
  field(SCAN, "Passive")
  field(FTVL, "ULONG")
  field(NELM, "1")
  field(MALM, "2")
  field(INDX, "1")
  field(FLNK, "$(P)$(R)AI_2Calc")
}
record(calcout, "$(P)$(R)AI_2Calc") {
  field(INPA, "$(P)$(R)AI_1")
  field(CALC, "(A>>16)&0x0000FFFF")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "$(P)$(R)AI2.RVAL PP")
}
record(ai, "$(P)$(R)AI2") {
  field(DTYP, "Raw Soft Channel")
  field(LINR, "LINEAR")
  field(PREC, "$(PREC=4)")
  field(FLNK, "$(P)$(R)AI_3Calc")
  info(archive, "Monitor, 00:00:01, VAL")
}
record(calcout, "$(P)$(R)AI_3Calc") {
  field(INPA, "$(P)$(R)AI_1")
  field(CALC, "(A&0x0000FFFF)")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "$(P)$(R)AI3.RVAL PP")
}
record(ai, "$(P)$(R)AI3") {
  field(DTYP, "Raw Soft Channel")
  field(LINR, "LINEAR")
  field(PREC, "$(PREC=4)")
  info(archive, "Monitor, 00:00:01, VAL")
}

# Deal with scaling the AIs
substitute "AI=AI0"
include "AI_scaling.template"
substitute "AI=AI1"
include "AI_scaling.template"
substitute "AI=AI2"
include "AI_scaling.template"
substitute "AI=AI3"
include "AI_scaling.template"

# Support alarming on the user AIs defined in AI_scaling.template
substitute "AI=AI0"
include "AI_alarm.template"

substitute "AI=AI1"
include "AI_alarm.template"

substitute "AI=AI2"
include "AI_alarm.template"

substitute "AI=AI3"
include "AI_alarm.template"


# ///
# /// AI descriptions
# ///
substitute "IO=AI0"
include "description.template"

substitute "IO=AI1"
include "description.template"

substitute "IO=AI2"
include "description.template"

substitute "IO=AI3"
include "description.template"

# ///
# /// Polling control
# /// The SCAN field may be adjusted if we have a comms alarm
# /// by logic in the ioLogikCommon.template
# ///
record(seq, "$(P)$(R)FastPollControl") {
  field(SCAN, ".1 second")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(LNK1, "$(P)$(R)DI.PROC PP")
  field(LNK2, "$(P)$(R)DO.PROC PP")
  field(LNK3, "$(P)$(R)AI.PROC PP")
}


#####################################################################
# Set functions.

# ///
# /// Set the DO status. This can be done by
# /// setting the bits (B0-B3).
# ///
record(mbboDirect, "$(P)$(R)DOSet") {
  field(DESC, "Set All DO")
  field(DTYP, "asynUInt32Digital")
  field(OUT, "@asynMask($(PORT)1w6,32,0x000F,1)INT32_BE")
  field(FLNK, "$(P)$(R)DO")
  info(archive, "Monitor, 00:00:01, VAL")
}


#####################################################################
# Alarm calculation for this module

# ///
# /// Calculate if we have a DI alarm
# ///
record(calc, "$(P)$(R)AlarmCalcDI") {
  field(INPA, "$(P)$(R)DI0.STAT CP")
  field(INPB, "$(P)$(R)DI1.STAT CP")
  field(INPC, "$(P)$(R)DI2.STAT CP")
  field(INPD, "$(P)$(R)DI3.STAT CP")
  field(CALC, "A||B||C||D")
}
# ///
# /// Calculate if we have an AI alarm
# ///
record(calc, "$(P)$(R)AlarmCalcAI") {
  field(INPA, "$(P)$(R)AI0User.STAT CP")
  field(INPB, "$(P)$(R)AI1User.STAT CP")
  field(INPC, "$(P)$(R)AI2User.STAT CP")
  field(INPD, "$(P)$(R)AI3User.STAT CP")
  field(CALC, "A||B||C||D")
}
record(calcout, "$(P)$(R)AlarmCalcComms") {
  field(INPA, "$(P)$(R)AlarmCtrl CP")
  field(INPB, "$(P)$(R)DI.STAT CP")
  field(INPC, "$(P)$(R)DO.STAT CP")
  field(INPD, "$(P)$(R)AI.STAT CP")
  field(INPE, "$(P)$(R)Uptime.STAT CP")
  field(INPF, "$(P)$(R)Watchdog CP")
  field(INPG, "$(P)$(R)AlarmCalcDI CP")
  field(INPH, "$(P)$(R)AlarmCalcAI CP")
  field(CALC, "A?(B||C||D||E||F||G||H):0")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "$(P)$(R)Alarm PP")
}
